<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="# variable name of the output network:  output_network%%00010%%00010import tensorflow as tf%%00010from TFModel import TFModel%%00010%%00010input_shape = (None, 28, 28, 1)%%00010num_classes = 10%%00010%%00010# Create a graph%%00010graph = tf.Graph()%%00010%%00010# Set the graph as default -&gt; Create every tensor in this graph%%00010with graph.as_default():%%00010%%00010%%00009# Create an input tensor%%00010%%00009x = tf.placeholder(tf.float32, shape=input_shape, name='input')%%00010%%00009%%00010%%00009# Define the graph%%00010%%00009# Convolutional Layer #1%%00010%%00009conv1 = tf.layers.conv2d(inputs=x, filters=32, kernel_size=[5, 5],%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009 padding=&quot;same&quot;, activation=tf.nn.relu)%%00010%%00010%%00009# Pooling Layer #1%%00010%%00009pool1 = tf.layers.max_pooling2d(inputs=conv1, pool_size=[2, 2], strides=2)%%00010%%00010%%00009# Convolutional Layer #2 and Pooling Layer #2%%00010%%00009conv2 = tf.layers.conv2d(inputs=pool1, filters=64, kernel_size=[5, 5],%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009 padding=&quot;same&quot;, activation=tf.nn.relu)%%00010%%00009pool2 = tf.layers.max_pooling2d(inputs=conv2, pool_size=[2, 2], strides=2)%%00010%%00010%%00009# Dense Layer%%00010%%00009pool2_flat = tf.reshape(pool2, [-1, 7 * 7 * 64])%%00010%%00009dense = tf.layers.dense(inputs=pool2_flat, units=512, activation=tf.nn.relu)%%00010%%00009%%00010%%00009# Create an output tensor%%00010%%00009y = tf.layers.dense(dense, num_classes, activation=tf.nn.softmax, name='output')%%00010%%00010# Create the output network%%00010output_network = TFModel(inputs={'input': x}, outputs={'output': y}, graph=graph)"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="PYTHON3"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="Create TensorFlow%%00010CNN"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="88"/>
<entry key="y-coordinate" type="xint" value="499"/>
<entry key="width" type="xint" value="104"/>
<entry key="height" type="xint" value="24"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="11"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="CONFIGURED"/>
<entry key="factory" type="xstring" value="org.knime.dl.python.base.node.creator.DLPythonCreatorNodeFactory"/>
<entry key="node-name" type="xstring" value="DL Python Network Creator"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Deep Learning - Python Backend"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.dl.python"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.7.0.v201811291931"/>
<entry key="node-feature-name" type="xstring" value="KNIME Deep Learning - Keras Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.dl.keras.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.7.0.v201811291931"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="DL Python Network Creator"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
